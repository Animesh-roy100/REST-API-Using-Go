definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Person:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:3001
info:
  contact: {}
  description: A RESTful API in Go to understand basics
  title: REST API Using Go
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user by logging in with email and password, and generate
        JWT token for authorization
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid email or password
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - user
  /persons:
    get:
      consumes:
      - application/json
      description: get all persons
      operationId: list-persons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Person'
            type: array
      summary: List all persons
      tags:
      - person
    post:
      consumes:
      - application/json
      description: Add a new person to the list
      operationId: create-person
      parameters:
      - description: Person object to be added
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Person'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new person
      tags:
      - person
  /persons/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a person by ID
      operationId: delete-person
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a person
      tags:
      - person
    get:
      consumes:
      - application/json
      description: get person details by ID
      operationId: get-person-by-id
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Person'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get person details
      tags:
      - person
    put:
      consumes:
      - application/json
      description: Update a person's details by ID
      operationId: update-person
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      - description: Person object with updated details
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/models.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a person
      tags:
      - person
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account by signing up with email and password
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Signup
      tags:
      - user
swagger: "2.0"
